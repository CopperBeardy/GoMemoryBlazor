@page "/Sequential"

<h3>Sequential</h3>

@switch (Game.GameStage)
{
    case GameStage.None:
        <GameOptions Game="@Game" OptionsSet="ToggleGameOptions"></GameOptions>
        break;
    case GameStage.Memorize:
        <MemorisingScreen Game="@Game" PlayLevel="(_ => Game.GameStage = GameStage.Guess)"></MemorisingScreen>
        break;

    case GameStage.Guess:
        <CascadingValue Value="@Game">
            <PlayArea Completed="Game.CheckFlag"></PlayArea>
        </CascadingValue>
        break;

    case GameStage.LevelComplete:
        <LevelComplete Level="@Game.CurrentLevel" NextLevel="Game.NextLevel"></LevelComplete>
        break;

    case GameStage.FailLevel:
        <LevelFailed Level="@Game.CurrentLevel" ResetLevel="Game.ResetLevel"></LevelFailed>
        break;


    case GameStage.CompleteMode:
        <DifficultyComplete ModeDifficulty="@Game.GameSettings.Difficulty" GameMenu="Game.ResetGame"></DifficultyComplete>
        break;
}

<button @onclick="Game.ResetGame">Reset Game</button>

@code {

    public Game Game { get; set; } = new Game();

    void ToggleGameOptions()
    {
        switch (Game.GameStage)
        {
            case GameStage.None:
                Game.GameSettings.RecallStyle = RecallStyle.Ordered;
                Game.NextLevel(true);
                break;
            default:
                Game.GameStage = GameStage.None;
                break;
        }
        StateHasChanged();
    }

   

   


    

   

}
