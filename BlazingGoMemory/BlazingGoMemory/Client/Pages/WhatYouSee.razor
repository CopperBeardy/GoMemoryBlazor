@page "/Whatyousee"

<h3>WhatYouSee</h3>


@switch (GameStage)
{
    case GameStage.None:
        <GameOptions Game="@Game" OptionsSet="ToggleGameOptions"></GameOptions>
        break;
    case GameStage.Memorize:
        <MemorisingScreen Game="@Game" PlayLevel="(_ => GameStage = GameStage.Guess)"></MemorisingScreen>
        break;

    case GameStage.Guess:
        <CascadingValue Value="@Game">
            <PlayArea  Completed="CheckFlag"></PlayArea>
        </CascadingValue>
        break;

    case GameStage.LevelComplete:
        <LevelComplete Level="@Game.CurrentLevel" NextLevel="NextLevel"></LevelComplete>
        break;

    case GameStage.FailLevel:
        <LevelFailed Level="@Game.CurrentLevel" ResetLevel="ResetLevel"></LevelFailed>
        break;

   
    case GameStage.CompleteMode:
        <DifficultyComplete ModeDifficulty="@Game.GameSettings.Difficulty" GameMenu="ResetGame"></DifficultyComplete>
        break;
}

<button @onclick="ResetGame">Reset Game</button>

@code {

    public Game Game { get; set; } = new Game();

    public GameStage GameStage { get; set; } = GameStage.None;


    protected override Task OnInitializedAsync()
    {
        Game.GameSettings.RecallStyle = RecallStyle.Unordered;
        return base.OnInitializedAsync();
    }

    void ResetGame()
    {
        Game.CurrentLevel = 0;
        GameStage = GameStage.None;
    }

    void ToggleGameOptions()
    {
        switch (GameStage)
        {
            case GameStage.None:
                NextLevel(true);
                break;
            default:
                GameStage = GameStage.None;
                break;
        }
        StateHasChanged();
    }

    void ResetLevel()
    {
        GameStage = GameStage.Memorize;
        SetTokens();
        StateHasChanged();
    }


    void NextLevel(bool status)
    {
        _ = status switch
        {
            true => Game.CurrentLevel++,
            false => Game.CurrentLevel--
        };
        GameStage = GameStage.Memorize;
        SetTokens();
    }


    void CheckFlag(bool success)
    {
        Game.TokensSelected = new List<Token>();
        if (success)
        {
            if (Game.CurrentLevel == Game.GameSettings.MaxLevel)
            {
                GameStage = GameStage.CompleteMode;
            }
            else
            {
                GameStage = GameStage.LevelComplete;
            }
        }
        else
        {
            GameStage = GameStage.FailLevel;
        }
        StateHasChanged();
    }

    void SetTokens()
    {
        Game.AllTokens = TokenHelper.ToMatchTokenList(Game.GameSettings.MaxTokens, TokenHelper.GetAllTokens());
        Game.TokensToRemember = TokenHelper.ToMatchTokenList(Game.CurrentLevel + 2, Game.AllTokens);
        Game.TokensToRemember = TokenHelper.ShuffleCollection(Game.TokensToRemember);
    }

}
