@page "/Whatyousee"

<h3>WhatYouSee</h3>

@if (ToggleGameOptionsShow)
{
    <CascadingValue Value="@Game" IsFixed="true">
        <GameOptions OptionsSet="ToggleGameOptionsShowChange"></GameOptions>
    </CascadingValue>
}
else
{
    switch (GameStage)
    {
        case GameStage.Memorize:
            <CascadingValue Value="@Game" IsFixed="true">
                <MemorisingScreen NextLevel="TogglePlayStage"></MemorisingScreen>
            </CascadingValue>
            break;

        case GameStage.Guess:

            <CascadingValue Value="@Game" IsFixed="true">
                <PlayArea Completed="CheckFlag"></PlayArea>
            </CascadingValue>
            break;

        //not checked as yet
        case GameStage.LevelComplete:
            <LevelComplete @bind-Level="@Game.CurrentLevel"
                           NextLevel="NextLevel"></LevelComplete>
            break;

        //not checked as yet
        case GameStage.FailLevel:
<CascadingValue Value="@Game.CurrentLevel">
    <LevelFailed 
                 ResetLevel="ResetLevel"></LevelFailed>
</CascadingValue> 
break;

        //not checked as yet
        case GameStage.CompleteMode:
            <DifficultyComplete @bind-ModeDifficulty="@Game.GameSettings.Difficulty"
                                GameMenu="ResetGame"></DifficultyComplete>
            break;
    }
}
<button @onclick="ResetGame">Reset Game</button>





@code {

    public Game Game { get; set; }

    public bool ToggleGameOptionsShow { get; set; }

    //[Inject]
    //public ITokenHelper TokenHelper { get; set; }
    public GameStage GameStage { get; set; }


    protected override Task OnInitializedAsync()
    {
        Game = new Game();
        ToggleGameOptionsShowChange(true);
        return base.OnInitializedAsync();
    }

    void ResetGame()
    {
        Game.CurrentLevel = 0;
        GameStage = GameStage.None;

        ToggleGameOptionsShowChange(true);

    }

    void ToggleGameOptionsShowChange(bool show)
    {

        if (show)
        {
            ToggleGameOptionsShow = true;
        }
        else
        {
            InitializeGame();
            ToggleGameOptionsShow = false;
        }
        StateHasChanged();
    }

    void ResetLevel()
    {
        GameStage = GameStage.Memorize;
        StateHasChanged();
    }


    void NextLevel(bool status)
    {
        _ = status switch
        {
            true => Game.CurrentLevel++,
            false => Game.CurrentLevel--
        };

        TogglePlayStage();
    }

    void InitializeGame()
    {

        Game.GameSettings.RecallStyle = RecallStyle.Unordered;
        Game.AllTokens = TokenHelper.ToMatchTokenList(Game.GameSettings.MaxTokens, TokenHelper.GetAllTokens());
        NextLevel(true);

    }

    void TogglePlayStage()
    {
        if (GameStage == GameStage.Memorize)
        {
            GameStage = GameStage.Guess;
            GuessStageSet();
        }
        else
        {
            GameStage = GameStage.Memorize;
            MemorizeStage();
        }

        StateHasChanged();
    }

    void CheckFlag(bool success)
    {
        if (success)
        {
            //check if last level if not  go next level
            Game.CurrentLevel++;
            if (Game.CurrentLevel > Game.GameSettings.MaxLevel)
            {
                //difficulty is complete
                GameStage = GameStage.CompleteMode;
            }
            else
            {
                GameStage = GameStage.LevelComplete;
            }
        }
        else
        {
            GameStage = GameStage.FailLevel;
            
        }
        StateHasChanged();
    }

    void MemorizeStage()
    {

        Game.TokensToRemember = TokenHelper.ToMatchTokenList(Game.CurrentLevel + 2, Game.AllTokens);
        Game.TokensToRemember = TokenHelper.ShuffleCollection(Game.TokensToRemember);
    }

    void GuessStageSet()
    {



    }

    //to write a method to watch the guess tokens being hit and check
    //whether they are correct or not. if not then display fail component
    //else if correct check if required number correctly guess,if not
    //wait for next guess. if all required correctly guessed display complete level component
    // then if all level have been completed show difficult complete screen, else start next level.



}
