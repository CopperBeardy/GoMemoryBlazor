@page "/Whatyousee"


<h3>WhatYouSee</h3>

@if (ToggleGameOptionsShow)
{
    <GameOptions DifficultyChanged="ToggleGameOptionsShowChange"></GameOptions>
}
else
{

    switch (GameStage)
    {
        case GameStage.Memorize:

            <div class="d-flex flex-column ">
                <div class="d-flex flex-row">
                    <label>Level - @Game.CurrentLevel </label>

                </div>
                <div class="d-flex flex-wrap">
                    @foreach (Token token in Game.TokensToRemember)
                    {

                        <img src="@token.Source" width="200" height="200" />
                    }

                </div>

            </div>

            <button @onclick="ChangeStage">Start</button>
    

            break;

        case GameStage.Guess:
            <h2>Hello from guess</h2>
            //Guess component

            <button @onclick="ResetLevel">Reset Level</button>
            break;

        case GameStage.LevelComplete:


            <LevelComplete @bind-Level="@Game.CurrentLevel" NextLevel="NextLevel"></LevelComplete>

            break;

        case GameStage.FailLevel:

            <CascadingValue Value="@Game.CurrentLevel">
                <LevelFailed NextLevel="NextLevel"></LevelFailed>
            </CascadingValue>
            break;

        case GameStage.CompleteMode:
            <CascadingValue Value="@Game.GameSettings.Difficulty">
                <DifficultyComplete GameMenu="ToggleGameOptionsShowChange"></DifficultyComplete>
            </CascadingValue>
            break;
    }
}
<button @onclick="ResetGame">Reset Game</button>





@code {

    public Game Game { get; set; }

    public bool ToggleGameOptionsShow { get; set; }
    public List<Token> AllTokens { get; set; }
    //[Inject]
    //public ITokenHelper TokenHelper { get; set; }
    public GameStage GameStage { get; set; }


    protected override Task OnInitializedAsync()
    {
        Game = new Game();

        ToggleGameOptionsShowChange(ModeDifficulty.None);
        return base.OnInitializedAsync();
    }

    void ResetGame()
    {
        Game.CurrentLevel = 0;
        GameStage = GameStage.None;
        ToggleGameOptionsShowChange(ModeDifficulty.None);

    }

    void ToggleGameOptionsShowChange(ModeDifficulty mode)
    {
        Game.GameSettings.Difficulty = mode;
        if (mode == ModeDifficulty.None)
        {
            ToggleGameOptionsShow = true;
        }
        else
        {
            InitializeGame();
            ToggleGameOptionsShow = false;
        }
        StateHasChanged();
    }

    void ResetLevel()
    {
        GameStage = GameStage.Memorize;
        StateHasChanged();
    }


    void NextLevel(bool status)
    {
        _ = status switch
        {
            true => Game.CurrentLevel++,
            false => Game.CurrentLevel--
        };

        ChangeStage();
    }

    void InitializeGame()
    {

        Game.GameSettings.RecallStyle = RecallStyle.Unordered;





        switch (Game.GameSettings.Difficulty)
        {
            case ModeDifficulty.Easy:
                Game.GameSettings.MaxLevel = 10;
                Game.GameSettings.GameSurface.Rows = 4;
                Game.GameSettings.GameSurface.Columns = 4;
                break;

            case ModeDifficulty.Normal:
                Game.GameSettings.MaxLevel = 20;
                Game.GameSettings.GameSurface.Rows = 5;
                Game.GameSettings.GameSurface.Columns = 5;
                break;

            case ModeDifficulty.Hard:
                Game.GameSettings.MaxLevel = 30;
                Game.GameSettings.GameSurface.Rows = 6;
                Game.GameSettings.GameSurface.Columns = 6;
                break;
            default:
                break;
        }

        AllTokens = TokenHelper.ToMatchTokenList(Game.GameSettings.GameSurface.Columns *
            Game.GameSettings.GameSurface.Rows, TokenHelper.GetAllTokens());
        NextLevel(true);
        // GameStage = GameStage.None;
    }

    void ChangeStage()
    {
        if (GameStage == GameStage.Memorize)
        {
            GameStage = GameStage.Guess;
            GuessStageSet();
        }
        else
        {
            GameStage = GameStage.Memorize;
            MemorizeStage();
        }

        StateHasChanged();
    }

    void MemorizeStage()
    {

        Game.TokensToRemember = TokenHelper.ToMatchTokenList(Game.CurrentLevel + 2, AllTokens);

    }

    void GuessStageSet()
    {



    }

    //to write a method to watch the guess tokens being hit and check
    //whether they are correct or not. if not then display fail component
    //else if correct check if required number correctly guess,if not
    //wait for next guess. if all required correctly guessed display complete level component
    // then if all level have been completed show difficult complete screen, else start next level.



}
