@page "/Whatyousee"


<h3>WhatYouSee</h3>

@if (ToggleGameOptionsShow)
{
<GameOptions DifficultyChanged="ToggleGameOptionsShowChange"  ></GameOptions>
}
else
{
  
 <PlayArea ></PlayArea> 

}



<button @onclick="ResetGame" >Reset Game</button>
@code {

    public Game Game { get; set; }

    public bool ToggleGameOptionsShow { get; set; }
    public List<Token> AllTokens { get; set; }
    [Inject]
    public ITokenHelper TokenHelper { get; set; }



    protected override Task OnInitializedAsync()
    {
        Game = new Game();
        TokenHelper = new TokenHelper();
        ToggleGameOptionsShowChange(ModeDifficulty.None);
        return base.OnInitializedAsync();
    }

    void ResetGame()
    {
        ToggleGameOptionsShowChange(ModeDifficulty.None);
    }

    void ToggleGameOptionsShowChange(ModeDifficulty mode)
    {
        Game.GameSettings.Difficulty = mode;
        if (mode == ModeDifficulty.None)
        {
            ToggleGameOptionsShow = true;
        }
        else
        {

            InitilizeGame();
            ToggleGameOptionsShow = false;
        }
        StateHasChanged();
    }

    void InitilizeGame()
    {
        Game.GameSettings.RecallStyle = RecallStyle.Unordered;
        Game.CurrentLevel = 1;


        AllTokens = TokenHelper.GetShuffledTokens(36);



        switch (Game.GameSettings.Difficulty)
        {
            case ModeDifficulty.Easy:
                Game.GameSettings.MaxLevel = 10;

                Game.GameSettings.GameSurface.Rows = 4;
                Game.GameSettings.GameSurface.Columns = 4;
                break;

            case ModeDifficulty.Normal:
                Game.GameSettings.MaxLevel = 20;
                Game.GameSettings.GameSurface.Rows = 5;
                Game.GameSettings.GameSurface.Columns = 5;
                break;

            case ModeDifficulty.Hard:
                Game.GameSettings.MaxLevel = 30;
                Game.GameSettings.GameSurface.Rows = 6;
                Game.GameSettings.GameSurface.Columns = 6;
                break;
            default:
                break;
        }
    }

}
