@page "/Whatyousee"

<h3>WhatYouSee</h3>

@if (ToggleGameOptionsShow)
{
    <CascadingValue Value="@Game">
        <GameOptions OptionsSet="ToggleGameOptionsShowChange"></GameOptions>
    </CascadingValue>
}
else
{

    switch (GameStage)
    {
        case GameStage.Memorize:
        <CascadingValue Value="@Game">
    <MemorisingScreen NextLevel="ChangeStage"></MemorisingScreen>
    </CascadingValue>
        break;

        case GameStage.Guess:
        <h2>Hello from guess</h2>
        //Guess component

        <button @onclick="ResetLevel">Reset Level</button>
        break;

        case GameStage.LevelComplete:
        <LevelComplete @bind-Level="@Game.CurrentLevel" NextLevel="NextLevel"></LevelComplete>
        break;

        case GameStage.FailLevel:
        <LevelFailed @bind-Level="@Game.CurrentLevel" ResetLevel="ResetLevel"></LevelFailed>
        break;

        case GameStage.CompleteMode:
        <DifficultyComplete @bind-ModeDifficulty="@Game.GameSettings.Difficulty" GameMenu="ResetGame"></DifficultyComplete>
        break;
        }
        }
        <button @onclick="ResetGame">Reset Game</button>





        @code {

    public Game Game { get; set; }

    public bool ToggleGameOptionsShow { get; set; }
    public List<Token> AllTokens { get; set; }
    //[Inject]
    //public ITokenHelper TokenHelper { get; set; }
    public GameStage GameStage { get; set; }


    protected override Task OnInitializedAsync()
    {
        Game = new Game();
        ToggleGameOptionsShowChange(true);
        return base.OnInitializedAsync();
    }

    void ResetGame()
    {
        Game.CurrentLevel = 0;
        GameStage = GameStage.None;

        ToggleGameOptionsShowChange(true);

    }

    void ToggleGameOptionsShowChange(bool show)
    {

        if (show)
        {
            ToggleGameOptionsShow = true;
        }
        else
        {
            InitializeGame();
            ToggleGameOptionsShow = false;
        }
        StateHasChanged();
    }

    void ResetLevel()
    {
        GameStage = GameStage.Memorize;
        StateHasChanged();
    }


    void NextLevel(bool status)
    {
        _ = status switch
        {
            true => Game.CurrentLevel++,
            false => Game.CurrentLevel--
        };

        ChangeStage();
    }

    void InitializeGame()
    {

        Game.GameSettings.RecallStyle = RecallStyle.Unordered;
        AllTokens = TokenHelper.ToMatchTokenList(Game.GameSettings.MaxTokens, TokenHelper.GetAllTokens());
        NextLevel(true);

    }

    void ChangeStage()
    {
        if (GameStage == GameStage.Memorize)
        {
            GameStage = GameStage.Guess;
            GuessStageSet();
        }
        else
        {
            GameStage = GameStage.Memorize;
            MemorizeStage();
        }

        StateHasChanged();
    }

    void MemorizeStage()
    {

        Game.TokensToRemember = TokenHelper.ToMatchTokenList(Game.CurrentLevel + 2, AllTokens);

    }

    void GuessStageSet()
    {



    }

    //to write a method to watch the guess tokens being hit and check
    //whether they are correct or not. if not then display fail component
    //else if correct check if required number correctly guess,if not
    //wait for next guess. if all required correctly guessed display complete level component
    // then if all level have been completed show difficult complete screen, else start next level.



        }
